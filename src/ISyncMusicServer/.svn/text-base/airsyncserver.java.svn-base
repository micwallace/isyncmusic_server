/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ISyncMusicServer;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.plaf.metal.MetalFileChooserUI;
import org.teleal.cling.UpnpService;
import org.teleal.cling.UpnpServiceImpl;
import org.teleal.cling.support.igd.PortMappingListener;
import org.teleal.cling.support.model.PortMapping;

/**
 *
 * @author michael
 */
public class airsyncserver extends javax.swing.JFrame {

    /**
     * Creates new form airsyncserver
     */
    public boolean initiated = false;
    public int confstage = 0;
    private boolean firstrun = false;
    public File dir = null;
    private httpd server;
    private AccountMngr accountMngr;
    private ReadIndex theindex;
    private Setup sysconf;
    public portmap mapping;

    public airsyncserver() throws IOException {
        HideToSystemTray();
        initComponents();
        // set inital status image
        servericonlabel.setIcon(new ImageIcon(airsyncserver.class.getResource("images/infoicon.png")));
        setLocationRelativeTo(getRootPane()); // center jframe in window
        // setup loader object and account manager for webservice setup
        accountMngr = new AccountMngr();
        // check for previous config
        // read config
        sysconf = new Setup();
        if (sysconf.getDirConfig().equals("0")) {
            // no valid config; lauch configuration dialog
            firstrun = true;
            initSetup();
        } else {
            // performs various tasks to initiate the application
            initApp();
        }
    }
    
    private void initSetup(){
        confstage = 1;
        setupdialog.setLocationRelativeTo(this);
        setupdialog.getContentPane().setBackground(new Color(130, 198, 255));
        setupdialog.setVisible(true);
    }
    
    private void initApp() {
        // read config and create file object from dir value
        dir = new File(sysconf.getDirConfig());
        theindex = new ReadIndex(dir);
        // set portmap object
        mapping = new portmap();
        // read index and create first UI view
        refreshUI();
        // setup Web Service view
        String[] wsconf = sysconf.getWSConfig();
        if (wsconf[0].equals("1")){
            wsactivetext.setText("Hey "+wsconf[1]+", Webservice has you covered");
            wsstatustxt.setText("Pending initial update...");
        } else {
            wsactivetext.setText("Webservice: Not Active");
            wsstatustxt.setText("");
        }
        // START SERVICES
        // httpd
        server = new httpd();
        try {
            server.start(dir.toString());
        } catch (Exception ex) {
            Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
        }
        // upnp
        
        // start scheduler
        IndexTimer indexservice = new IndexTimer();
        indexservice.run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setupdialog = new javax.swing.JDialog();
        backsb = new javax.swing.JButton();
        forwardsb = new javax.swing.JButton();
        welcomebox = new javax.swing.JScrollPane();
        welcometext = new javax.swing.JTextArea();
        wssetup = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        loginpanel = new javax.swing.JPanel();
        wsloginemail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        loginbutton = new javax.swing.JButton();
        wsloginstatus = new javax.swing.JPanel();
        wslogintext = new javax.swing.JLabel();
        wsloginicon = new javax.swing.JLabel();
        wsloginpass = new javax.swing.JPasswordField();
        regpanel = new javax.swing.JPanel();
        registerbutton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        wsconfemail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        wsemail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        wsaccnstatus = new javax.swing.JPanel();
        wsaccntext = new javax.swing.JLabel();
        wsaccnicon = new javax.swing.JLabel();
        wsconfpass = new javax.swing.JPasswordField();
        wspass = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        class CustomChooserUI extends MetalFileChooserUI{
            public CustomChooserUI(JFileChooser filechooser) {
                super(filechooser);
            }
            public void installComponents(JFileChooser fc) {
                super.installComponents(fc);
                paintComponents(getButtonPanel().getComponents(), false);
                paintComponents(getBottomPanel().getComponents(), false);
                paintComponents(getFileChooser().getComponents(), true);
                //getBottomPanel().setBackground(new Color(130,198,255));
                //getButtonPanel().setBackground(new Color(130,198,255));
            }
            public void paintComponents(Component[] comps, boolean paintsubs){
                for( int i = 0; i < comps.length; i++ ) {
                    Component c = comps[i];
                    c.setBackground(new Color(130,198,255));
                    if (paintsubs && (c instanceof Container)){
                        Component[] subcomps = ((Container) c).getComponents();
                        paintComponents(subcomps, false);
                    }
                }
            }
        }
        class CustomChooser extends JFileChooser{
            public CustomChooser(){
                super();
                setUI( new CustomChooserUI(this));
            }
        }
        filechooser = new CustomChooser();
        folderconfirm = new javax.swing.JPanel();
        cfmtxt1 = new javax.swing.JLabel();
        confirmdir = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        setupfinished = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        artistpane = new javax.swing.JScrollPane();
        artistmenu = new javax.swing.JList();
        albumpane = new javax.swing.JScrollPane();
        albummenu = new javax.swing.JList();
        songpane = new javax.swing.JScrollPane();
        songmenu = new javax.swing.JList();
        statusbar = new javax.swing.JPanel();
        indexstatuslabel = new javax.swing.JLabel();
        servericonlabel = new javax.swing.JLabel();
        indexlabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        totalsongslabel = new javax.swing.JLabel();
        totalsizelabel = new javax.swing.JLabel();
        intiplabel = new javax.swing.JLabel();
        extiplabel = new javax.swing.JLabel();
        extiptext = new javax.swing.JLabel();
        intiptext = new javax.swing.JLabel();
        syncicon = new javax.swing.JLabel();
        wsinfopanel = new javax.swing.JPanel();
        wsactivetext = new javax.swing.JLabel();
        wsstatus = new javax.swing.JPanel();
        wsstatustxt = new javax.swing.JLabel();
        wsstatusicon = new javax.swing.JLabel();
        indexbutton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        quitbutton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        serverbutton = new javax.swing.JMenuItem();
        upnpbutton = new javax.swing.JMenuItem();
        runsetup = new javax.swing.JMenuItem();

        setupdialog.setTitle("Initial Setup");
        setupdialog.setAlwaysOnTop(true);
        setupdialog.setBounds(new java.awt.Rectangle(50, 50, 0, 0));
        setupdialog.setMinimumSize(new java.awt.Dimension(620, 600));
        setupdialog.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        setupdialog.setPreferredSize(new java.awt.Dimension(620, 600));
        setupdialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                setupdialogWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                setupdialogWindowClosed(evt);
            }
        });

        backsb.setText("Cancel");
        backsb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backsbActionPerformed(evt);
            }
        });

        forwardsb.setText("Continue");
        forwardsb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardsbActionPerformed(evt);
            }
        });

        welcometext.setColumns(20);
        welcometext.setEditable(false);
        welcometext.setRows(5);
        welcometext.setText("rtrdrgd");
        welcometext.setPreferredSize(new java.awt.Dimension(550, 500));
        welcomebox.setViewportView(welcometext);

        wssetup.setBackground(new java.awt.Color(130, 198, 255));
        wssetup.setVisible(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Web Service Setup (Recommended):");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("<html>The web service allows your android device to keep track of your computers IP addresses <br><br> It will allow undisrupted access to your music collection.<br><br>You should sign up for this service if: <br><br>You are a non-technical user<br><br><center>OR</center><br>You know that you computer or internet connection has a dynamic IP address<br><br>Don't worry if you change your mind, you can always sign up later.</html>");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setMinimumSize(new java.awt.Dimension(240, 119));

        loginpanel.setBackground(new java.awt.Color(130, 198, 255));

        wsloginemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsloginemailActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Email:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Password:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Existing Account:");

        loginbutton.setText("Login");
        loginbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginbuttonActionPerformed(evt);
            }
        });

        wsloginstatus.setOpaque(false);

        javax.swing.GroupLayout wsloginstatusLayout = new javax.swing.GroupLayout(wsloginstatus);
        wsloginstatus.setLayout(wsloginstatusLayout);
        wsloginstatusLayout.setHorizontalGroup(
            wsloginstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wsloginstatusLayout.createSequentialGroup()
                .addComponent(wsloginicon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wslogintext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        wsloginstatusLayout.setVerticalGroup(
            wsloginstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wslogintext, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(wsloginicon, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        wsloginpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsloginpassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginpanelLayout = new javax.swing.GroupLayout(loginpanel);
        loginpanel.setLayout(loginpanelLayout);
        loginpanelLayout.setHorizontalGroup(
            loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(loginpanelLayout.createSequentialGroup()
                .addGroup(loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wsloginemail)
                    .addComponent(wsloginpass)))
            .addComponent(wsloginstatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(loginpanelLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(loginbutton)
                .addContainerGap())
        );
        loginpanelLayout.setVerticalGroup(
            loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginpanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsloginemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(wsloginpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wsloginstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginbutton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        regpanel.setBackground(new java.awt.Color(130, 198, 255));

        registerbutton.setText("Register");
        registerbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerbuttonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Confirm Password:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Password:");

        wsconfemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsconfemailActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Confirm Email:");

        wsemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsemailActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Email:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("New Account:");

        wsaccnstatus.setOpaque(false);

        javax.swing.GroupLayout wsaccnstatusLayout = new javax.swing.GroupLayout(wsaccnstatus);
        wsaccnstatus.setLayout(wsaccnstatusLayout);
        wsaccnstatusLayout.setHorizontalGroup(
            wsaccnstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wsaccnstatusLayout.createSequentialGroup()
                .addComponent(wsaccnicon, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wsaccntext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        wsaccnstatusLayout.setVerticalGroup(
            wsaccnstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wsaccntext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(wsaccnicon, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        wsconfpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsconfpassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout regpanelLayout = new javax.swing.GroupLayout(regpanel);
        regpanel.setLayout(regpanelLayout);
        regpanelLayout.setHorizontalGroup(
            regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(regpanelLayout.createSequentialGroup()
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wsemail)
                    .addComponent(wsconfemail)
                    .addComponent(wspass)
                    .addComponent(wsconfpass)))
            .addComponent(wsaccnstatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(regpanelLayout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(registerbutton)
                .addContainerGap(134, Short.MAX_VALUE))
        );
        regpanelLayout.setVerticalGroup(
            regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, regpanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsconfemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(wspass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(regpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(wsconfpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wsaccnstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerbutton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout wssetupLayout = new javax.swing.GroupLayout(wssetup);
        wssetup.setLayout(wssetupLayout);
        wssetupLayout.setHorizontalGroup(
            wssetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wssetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wssetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wssetupLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(wssetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        wssetupLayout.setVerticalGroup(
            wssetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wssetupLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addGroup(wssetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(wssetupLayout.createSequentialGroup()
                        .addComponent(regpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        filechooser.setVisible(false);
        filechooser.setBackground(new java.awt.Color(130, 198, 255));
        filechooser.setControlButtonsAreShown(false);
        filechooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        filechooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        filechooser.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                filechooserComponentShown(evt);
            }
        });
        filechooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filechooserActionPerformed(evt);
            }
        });

        folderconfirm.setBackground(new java.awt.Color(130, 198, 255));
        folderconfirm.setVisible(false);

        cfmtxt1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cfmtxt1.setText("Your music will now be indexed from the following folder:");

        confirmdir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        confirmdir.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("If this is correct, press next to index your music.");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout folderconfirmLayout = new javax.swing.GroupLayout(folderconfirm);
        folderconfirm.setLayout(folderconfirmLayout);
        folderconfirmLayout.setHorizontalGroup(
            folderconfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(confirmdir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(folderconfirmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(folderconfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, folderconfirmLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(104, 104, 104))
                    .addComponent(cfmtxt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        folderconfirmLayout.setVerticalGroup(
            folderconfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(folderconfirmLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(cfmtxt1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmdir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 346, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setupfinished.setBackground(new java.awt.Color(130, 198, 255));
        setupfinished.setVisible(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Setup Complete!");

        javax.swing.GroupLayout setupfinishedLayout = new javax.swing.GroupLayout(setupfinished);
        setupfinished.setLayout(setupfinishedLayout);
        setupfinishedLayout.setHorizontalGroup(
            setupfinishedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupfinishedLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        setupfinishedLayout.setVerticalGroup(
            setupfinishedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupfinishedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(450, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout setupdialogLayout = new javax.swing.GroupLayout(setupdialog.getContentPane());
        setupdialog.getContentPane().setLayout(setupdialogLayout);
        setupdialogLayout.setHorizontalGroup(
            setupdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupdialogLayout.createSequentialGroup()
                .addGroup(setupdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupdialogLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(setupfinished, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(setupdialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(folderconfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(setupdialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backsb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(forwardsb))
                    .addGroup(setupdialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(setupdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wssetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(welcomebox)))
                    .addGroup(setupdialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filechooser, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)))
                .addContainerGap())
        );
        setupdialogLayout.setVerticalGroup(
            setupdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupdialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomebox, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wssetup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(folderconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setupfinished, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(setupdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forwardsb)
                    .addComponent(backsb))
                .addContainerGap())
        );

        setIconImages(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        artistpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        artistmenu.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                artistmenuValueChanged(evt);
            }
        });
        artistpane.setViewportView(artistmenu);

        albumpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        albummenu.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                albummenuValueChanged(evt);
            }
        });
        albumpane.setViewportView(albummenu);

        songpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        songmenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songmenuMouseClicked(evt);
            }
        });
        songpane.setViewportView(songmenu);

        statusbar.setBackground(new java.awt.Color(51, 51, 51));

        indexstatuslabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        indexstatuslabel.setForeground(new java.awt.Color(255, 255, 255));
        indexstatuslabel.setText("Indexing Status: Pending initial index");

        indexlabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISyncMusicServer/images/synciconsmall.png"))); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Server Status:");

        javax.swing.GroupLayout statusbarLayout = new javax.swing.GroupLayout(statusbar);
        statusbar.setLayout(statusbarLayout);
        statusbarLayout.setHorizontalGroup(
            statusbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusbarLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(indexlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexstatuslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servericonlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        statusbarLayout.setVerticalGroup(
            statusbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(servericonlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(statusbarLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(statusbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexstatuslabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14))
                .addContainerGap())
            .addComponent(indexlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        totalsongslabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalsongslabel.setText("Total Songs: Calculating...");

        totalsizelabel.setText(" Total size: Calculating...");

        intiplabel.setText("Current Internal IP:");

        extiplabel.setText("Current External IP:");

        extiptext.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        extiptext.setText("Calculating...");

        intiptext.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        intiptext.setText("Calculating...");

        syncicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ISyncMusicServer/images/syncmusicicon.png"))); // NOI18N

        wsinfopanel.setOpaque(false);

        wsactivetext.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wsactivetext.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wsactivetext.setText("Webservice: Not Active");

        wsstatus.setOpaque(false);

        wsstatustxt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wsstatustxt.setText("test");

        wsstatusicon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wsstatusicon.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        wsstatusicon.setIconTextGap(1);
        wsstatusicon.setMaximumSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout wsstatusLayout = new javax.swing.GroupLayout(wsstatus);
        wsstatus.setLayout(wsstatusLayout);
        wsstatusLayout.setHorizontalGroup(
            wsstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wsstatusLayout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(wsstatustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wsstatusicon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        wsstatusLayout.setVerticalGroup(
            wsstatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wsstatusicon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(wsstatustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout wsinfopanelLayout = new javax.swing.GroupLayout(wsinfopanel);
        wsinfopanel.setLayout(wsinfopanelLayout);
        wsinfopanelLayout.setHorizontalGroup(
            wsinfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wsactivetext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(wsstatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        wsinfopanelLayout.setVerticalGroup(
            wsinfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wsinfopanelLayout.createSequentialGroup()
                .addComponent(wsactivetext, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wsstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        indexbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        indexbutton.setText("Find new songs");
        indexbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexbuttonActionPerformed(evt);
            }
        });

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setBorder(null);

        jMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jMenu1.setText("File");

        quitbutton.setBackground(new java.awt.Color(255, 255, 255));
        quitbutton.setText("Quit");
        quitbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitbuttonMouseClicked(evt);
            }
        });
        quitbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitbuttonActionPerformed(evt);
            }
        });
        jMenu1.add(quitbutton);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(255, 255, 255));
        jMenu2.setText("Settings");

        serverbutton.setBackground(new java.awt.Color(255, 255, 255));
        serverbutton.setText("Stop Server");
        serverbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverbuttonActionPerformed(evt);
            }
        });
        jMenu2.add(serverbutton);

        upnpbutton.setBackground(new java.awt.Color(255, 255, 255));
        upnpbutton.setText("Start Upnp");
        upnpbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upnpbuttonActionPerformed(evt);
            }
        });
        jMenu2.add(upnpbutton);

        runsetup.setBackground(new java.awt.Color(255, 255, 255));
        runsetup.setText("Re-run Setup");
        runsetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runsetupActionPerformed(evt);
            }
        });
        jMenu2.add(runsetup);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(artistpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(69, 69, 69)
                .addComponent(albumpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(59, 59, 59)
                .addComponent(songpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(48, 48, 48))
            .addComponent(statusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(syncicon, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalsongslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalsizelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(indexbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wsinfopanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(extiplabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(intiplabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(intiptext, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(extiptext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(syncicon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wsinfopanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(intiptext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(intiplabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(extiplabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extiptext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalsongslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(totalsizelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(indexbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(albumpane, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addComponent(artistpane)
                    .addComponent(songpane))
                .addGap(18, 18, 18)
                .addComponent(statusbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitbuttonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_quitbuttonActionPerformed

    private void quitbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitbuttonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_quitbuttonMouseClicked

    private void upnpbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upnpbuttonActionPerformed
        // TODO add your handling code here:
        upnpbutton.setEnabled(false);
        if (upnpbutton.getText().equals("Start Upnp")) {
            mapping.start();
            upnpbutton.setText("Stop Upnp");
        } else {
            mapping.stop();
            upnpbutton.setText("Start Upnp");
        }
        upnpbutton.setEnabled(true);
        System.gc();
    }//GEN-LAST:event_upnpbuttonActionPerformed

    private void setupdialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_setupdialogWindowClosed
        // TODO add your handling code here:
        if (confstage != 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_setupdialogWindowClosed

    private void backsbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backsbActionPerformed
        // TODO add your handling code here:
        switch (confstage) {
            // installer ; collect info
            case (1):
                if (firstrun) { System.exit(0); } else { setupdialog.setVisible(false); }
                break;
            case (2):
                wssetup.setVisible(false);
                backsb.setText("Quit");
                welcomebox.setVisible(true);
                setupdialog.repaint();
                confstage = 1;
                break;
            case (3):
                filechooser.setVisible(false);
                wssetup.setVisible(true);
                setupdialog.repaint();
                confstage = 2;
                break;
            case (4):
                filechooser.setVisible(true);
                folderconfirm.setVisible(false);
                setupdialog.repaint();
                confstage = 3;
                break;
        }
    }//GEN-LAST:event_backsbActionPerformed

    private void forwardsbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardsbActionPerformed
        // TODO add your handling code here:
        switch (confstage) {
            // installer ; collect info
            case (1):
                // Webservice connect
                welcomebox.setVisible(false);
                backsb.setText("Back");
                // hide status and progress
                wsaccntext.setText("");
                wslogintext.setText("");
                wssetup.setVisible(true);
                setupdialog.repaint();
                confstage = 2;
                break;
            case (2):
                // music folder chooser
                wssetup.setVisible(false);
                if (dir!=null){ 
                    filechooser.setCurrentDirectory(dir);
                    filechooser.setSelectedFile(dir);
                }
                filechooser.setVisible(true);
                setupdialog.repaint();
                confstage = 3;
                break;
            case (3):
                // music folder confirm
                dir = filechooser.getSelectedFile();
                confirmdir.setText(dir.getAbsolutePath());
                filechooser.setVisible(false);
                folderconfirm.setVisible(true);
                setupdialog.repaint();
                confstage = 4;
                break;
            // create config
            case (4):
                backsb.setVisible(false);
                Setup initialsetup = new Setup(dir);
                // run initial index; now done when the UI is brought up
                // initialsetup.runindex();
                initialsetup.setDirConfig(dir.toString());
                // save config
                initialsetup.saveconfig();
                // show final info / Upnp http/ftp status TBC
                folderconfirm.setVisible(false);
                setupfinished.setVisible(true);
                setupdialog.repaint();
                confstage = 5;
                break;
            case (5):
                confstage = 0;
                setupdialog.setVisible(false);
                initApp();
                break;
        }
    }//GEN-LAST:event_forwardsbActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (confstage != 0 & firstrun) {
            System.exit(0);
        } else if (!initiated) {
            //initApp();
            //initiated = true;
        }
    }//GEN-LAST:event_formWindowActivated

    private void runsetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runsetupActionPerformed
        // TODO add your handling code here:
        initSetup();
    }//GEN-LAST:event_runsetupActionPerformed

    private void serverbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverbuttonActionPerformed
        // TODO add your handling code here:
        serverbutton.setEnabled(false);
        if (serverbutton.getText().equals("Stop Server")) {
            server.stop();
            serverbutton.setText("Start Server");
        } else {
            try {
                server.start(dir.toString());
                serverbutton.setText("Stop Server");
            } catch (Exception ex) {
                Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // set status icon
        servericonlabel.setIcon(new ImageIcon(airsyncserver.class.getResource("images/" + (serverbutton.getText().equals("Stop Server") ? "ok" : "stopped") + "icon.png")));
        serverbutton.setEnabled(true);
        System.gc();
    }//GEN-LAST:event_serverbuttonActionPerformed

    private void albummenuValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_albummenuValueChanged
        // TODO add your handling code here:
        if (!albummenu.isSelectionEmpty()) {
            String salbum = new String();
            String sartist = new String();
            salbum = albummenu.getSelectedValue().toString();
            if (!artistmenu.isSelectionEmpty()) {
                sartist = artistmenu.getSelectedValue().toString();
            } else {
                sartist = "All";
            }
            if (theindex == null) {
                theindex = new ReadIndex(dir);
            }
            if (!theindex.isIndexRead()) {
                theindex.readIndex();
            }
            /*
             * try { theindex.parsetohashmap(); } catch (IOException ex) {
             * Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE,
             * null, ex); }
             */
            DefaultListModel slistmodel;
            if ("All".equals(salbum)) {
                if ("All".equals(sartist)) {
                    slistmodel = theindex.getallsongs();
                } else {
                    slistmodel = theindex.getartistsongs(sartist);
                }
            } else {
                slistmodel = theindex.getalbumsongs(sartist, salbum);
            }
            songmenu.setModel(slistmodel);
        } else {
        }
        //System.gc();
    }//GEN-LAST:event_albummenuValueChanged

    private void artistmenuValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_artistmenuValueChanged
        // TODO add your handling code here:
        if (!artistmenu.isSelectionEmpty()) {
            String sartist = artistmenu.getSelectedValue().toString();
            if (theindex == null) {
                theindex = new ReadIndex(dir);
            }
            if (!theindex.isIndexRead()) {
                theindex.readIndex();
            }
            DefaultListModel alistmodel;
            DefaultListModel slistmodel;
            if (!"All".equals(sartist)) {
                //alistmodel.clear();
                alistmodel = theindex.getartistalbums(sartist);
                alistmodel.add(0, "All");
                /*
                 * try { theindex.parsetohashmap(); } catch (IOException ex) {
                 * Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE,
                 * null, ex); }
                 */
                slistmodel = theindex.getartistsongs(sartist);
            } else {
                //alistmodel.clear();
                alistmodel = theindex.getallalbums();
                /*
                 * try { theindex.parsetohashmap(); } catch (IOException ex) {
                 * Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE,
                 * null, ex); }
                 */
                slistmodel = theindex.getallsongs();
            }
            albummenu.setModel(alistmodel);
            songmenu.setModel(slistmodel);
        }
        System.gc();
    }//GEN-LAST:event_artistmenuValueChanged

    private void songmenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songmenuMouseClicked
        // TODO add your handling code here:
        SongListModel songmodel = (SongListModel) songmenu.getSelectedValue();
        System.out.println(songmodel.getRelPath());
        // generate complete path
        String filepath = dir.getAbsolutePath().toString() + File.separator + songmodel.getRelPath();
        System.out.println(filepath);
        openMedia(filepath);
    }//GEN-LAST:event_songmenuMouseClicked

    private void filechooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filechooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filechooserActionPerformed

    private void setupdialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_setupdialogWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_setupdialogWindowClosing

    private void wsemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsemailActionPerformed

    private void wsconfemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsconfemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsconfemailActionPerformed

    private void wsloginemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsloginemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsloginemailActionPerformed

    private void loginbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginbuttonActionPerformed
        // start loader
        // get form values
        String email = wsloginemail.getText();
        final char[] passchar = wsloginpass.getPassword();
        String pass = "";
        for (int i=0; i<passchar.length; i++){
            pass+=passchar[i];
        }
        // validate input
        // hash the password
        String hashedpass = new String();
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            byte[] hashedbytes = digest.digest(pass.getBytes());
            hashedpass = new BigInteger(1, hashedbytes).toString(16);
	} catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
	}
        // check account using wservice
        String result = accountMngr.checkAccn(email, hashedpass);
        // save configuration if successful and update UI
        if (result.equals("1")){
            // set form status indicators accordingly
           wsloginicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/okicon.png")));
           wslogintext.setText("Sucessfully Logged in.");
           // save ws configuration
           Setup initialsetup = new Setup();
           initialsetup.addWSconfig(email, hashedpass);
           initialsetup.saveconfig();
        } else {
           wsloginicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/stoppedicon.png")));
           wslogintext.setText(result);
        }
        // stop loader
        //wsprogress.setVisible(false);
        System.out.println("webservice check complete");
        
    }//GEN-LAST:event_loginbuttonActionPerformed

    private void registerbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerbuttonActionPerformed
        // TODO add your handling code here:
        // get form values
        String email = wsemail.getText();
        String cfmemail = wsconfemail.getText();
        final char[] passchar = wspass.getPassword(); // get form values
        String pass = "";
        for (int i=0; i<passchar.length; i++){
            pass+=passchar[i];
        }
        char[] cfmpasschar = wsconfpass.getPassword();
        String cfmpass = "";
        for (int i=0; i<cfmpasschar.length; i++){
            cfmpass+=cfmpasschar[i];
        }
        // validate input
        
        // create account on server
        String result = accountMngr.createAccn(email, pass);
        // update UI
        if (result.equals("1")){
           // set form status indicators accordingly
           wsaccnicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/okicon.png")));
           wsaccntext.setText("Account successfully created, please check your inbox for the activation email.");
        } else {
           wsaccnicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/stoppedicon.png")));
           wsaccntext.setText(result);
        }
    }//GEN-LAST:event_registerbuttonActionPerformed

    private void wsloginpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsloginpassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsloginpassActionPerformed

    private void wsconfpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsconfpassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsconfpassActionPerformed

    private void filechooserComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_filechooserComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_filechooserComponentShown

    private void indexbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexbuttonActionPerformed
        // TODO add your handling code here:
         // Run indexer
            indexbutton.setEnabled(false);
            indexbutton.setText("Indexing...");
            indexstatuslabel.setText("Index Status: Running");
            class userindextask extends SwingWorker<String, Object> {
                @Override
                protected String doInBackground() throws Exception {
                    sysconf.runindex();
                    return "";
                }
                @Override
                protected void done() {
                   indexstatuslabel.setText("Index Status: Last index successful!");
                    // refresh UI
                    refreshUI();
                    indexbutton.setEnabled(true);
                    indexbutton.setText("Find new songs"); 
                } 
            };
            (new userindextask()).execute();
    }//GEN-LAST:event_indexbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(airsyncserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(airsyncserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(airsyncserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(airsyncserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    airsyncserver view = new airsyncserver();
                    Color color = new Color(130, 198, 255);
                    view.getContentPane().setBackground(color);
                    view.jMenuBar1.setBackground(new Color(51, 51, 51));
                    Image icon = Toolkit.getDefaultToolkit().getImage(airsyncserver.class.getResource("images/synciconsmall.png"));
                    view.setIconImage(icon);
                    view.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList albummenu;
    private javax.swing.JScrollPane albumpane;
    private javax.swing.JList artistmenu;
    private javax.swing.JScrollPane artistpane;
    private javax.swing.JButton backsb;
    private javax.swing.JLabel cfmtxt1;
    private javax.swing.JLabel confirmdir;
    private javax.swing.JLabel extiplabel;
    private javax.swing.JLabel extiptext;
    private javax.swing.JFileChooser filechooser;
    private javax.swing.JPanel folderconfirm;
    private javax.swing.JButton forwardsb;
    private javax.swing.JButton indexbutton;
    private javax.swing.JLabel indexlabel;
    private javax.swing.JLabel indexstatuslabel;
    private javax.swing.JLabel intiplabel;
    private javax.swing.JLabel intiptext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton loginbutton;
    private javax.swing.JPanel loginpanel;
    private javax.swing.JMenuItem quitbutton;
    private javax.swing.JButton registerbutton;
    private javax.swing.JPanel regpanel;
    private javax.swing.JMenuItem runsetup;
    private javax.swing.JMenuItem serverbutton;
    private javax.swing.JLabel servericonlabel;
    private javax.swing.JDialog setupdialog;
    private javax.swing.JPanel setupfinished;
    private javax.swing.JList songmenu;
    private javax.swing.JScrollPane songpane;
    private javax.swing.JPanel statusbar;
    private javax.swing.JLabel syncicon;
    private javax.swing.JLabel totalsizelabel;
    private javax.swing.JLabel totalsongslabel;
    private javax.swing.JMenuItem upnpbutton;
    private javax.swing.JScrollPane welcomebox;
    private javax.swing.JTextArea welcometext;
    private javax.swing.JLabel wsaccnicon;
    private javax.swing.JPanel wsaccnstatus;
    private javax.swing.JLabel wsaccntext;
    private javax.swing.JLabel wsactivetext;
    private javax.swing.JTextField wsconfemail;
    private javax.swing.JPasswordField wsconfpass;
    private javax.swing.JTextField wsemail;
    private javax.swing.JPanel wsinfopanel;
    private javax.swing.JTextField wsloginemail;
    private javax.swing.JLabel wsloginicon;
    private javax.swing.JPasswordField wsloginpass;
    private javax.swing.JPanel wsloginstatus;
    private javax.swing.JLabel wslogintext;
    private javax.swing.JPasswordField wspass;
    private javax.swing.JPanel wssetup;
    private javax.swing.JPanel wsstatus;
    private javax.swing.JLabel wsstatusicon;
    private javax.swing.JLabel wsstatustxt;
    // End of variables declaration//GEN-END:variables
    // start custom public classes and functions
    // open media in external player
    
    /*public class Loader {

        private JDialog dialog;
        private JProgressBar pb;

        public Loader() {
        }

        public void showLoader() {
            if (dialog != null) {
                dialog.setVisible(true);
            } else {
                // progress bar
                pb = new JProgressBar(0, 100);
                pb.setPreferredSize(new Dimension(175, 20));
                pb.setString("Working");
                pb.setStringPainted(true);
                pb.setIndeterminate(true);
                // panel
                JPanel center_panel = new JPanel();
                center_panel.add(pb);
                // dialog
                dialog = new JDialog((JFrame) null, "Contacting Web Service...");
                dialog.getContentPane().add(center_panel, BorderLayout.CENTER);
                dialog.pack();
                //dialog.setModal(true);
                dialog.setLocationRelativeTo(null); // center on screen
                dialog.setAlwaysOnTop(true);
                dialog.setVisible(true);
            }
        }
        public void hideLoader() {
            dialog.setVisible(false);
        }
    }*/

    public void openMedia(String _filepath) {
        File file = new File(_filepath);
        // start player
        System.out.println(Desktop.getDesktop().isSupported(Desktop.Action.OPEN));
        Desktop dt = Desktop.getDesktop();
        try {
            dt.open(file);
        } catch (IOException ex) {
            Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
            // try alternative launch method
            openMediaAlt(_filepath);
        }
    }
    // alternative method for opening media in exernal player

    public void openMediaAlt(String _filepath) {
        Runtime rt = Runtime.getRuntime();
        try {
            rt.exec(new String[]{"explorer", _filepath});
        } catch (IOException ex1) {
            Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex1);
        }
    }
    // refresh ui music lists and details

    public void refreshUI() {
        // refresh list views
        theindex.readIndex();
        DefaultListModel listmodel = theindex.getallartists();
        listmodel.add(0, "All");
        artistmenu.setModel(listmodel);
        // run filter and populate jpane with albums
        DefaultListModel alistmodel = theindex.getallalbums();
        albummenu.setModel(alistmodel);
        // run filter and populate jpane with songs
        DefaultListModel slistmodel = theindex.getallsongs();
        songmenu.setModel(slistmodel);
        // pupulate totalsonglabel
        String file_count = Integer.toString(theindex.countFiles());
        totalsongslabel.setText("Currently sharing " + file_count + " files");
        // populate totalsize label
        totalsizelabel.setText("at a total of " + theindex.getTotalFileSize());
        System.gc();
    }

    public class portmap {

        public String localIP;
        public UpnpService upnpService;
        public PortMapping desiredMapping;

        public void start() {
            try {
                InetAddress thisIP = InetAddress.getLocalHost();
                localIP = thisIP.getHostAddress();
            } catch (UnknownHostException ex) {
                Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
            }
            desiredMapping = new PortMapping(
                    8080,
                    localIP,
                    PortMapping.Protocol.TCP,
                    "AirSync-httpd");

            upnpService =
                    new UpnpServiceImpl(
                    new PortMappingListener(desiredMapping));

            upnpService.getControlPoint().search();
        }

        public void stop() {
            // shutdown upnp service; also deletes mapping
            upnpService.shutdown();
        }
    }

    class IndexTimer {

        IndexTimer() {
        }

        public void run() {
            Timer timer = new Timer("Timer");

            IndexTask t = new IndexTask();

            timer.schedule(t, 0, (60 * 60000));
        }
    }

    class IndexTask extends TimerTask {

        Setup indextask;
        int index_task_counter;

        IndexTask() {
            indexstatuslabel.setText("Index Status: Not Setup");
            index_task_counter = 0;
        }

        @Override
        public void run() {
            index_task_counter++;
            System.out.println("Running scheduled tasks: " + index_task_counter);
            // CHECK SERVICE STATUS
            // check http
            httpd testhttp = new httpd();
            boolean servstat = testhttp.testServer();
            System.out.println("HTTP status: " + (servstat ? "OK" : "Down"));
            // set error icon
            servericonlabel.setIcon(new ImageIcon(airsyncserver.class.getResource("images/" + (servstat ? "ok" : "stopped") + "icon.png")));
            // check upnp port forward using web service TBC

            // Run indexer
            indexbutton.setEnabled(false);
            indexbutton.setText("Indexing...");
            indexstatuslabel.setText("Index Status: Running");
            indextask = new Setup(dir);
            indextask.runindex();
            indexstatuslabel.setText("Index Status: Last index successful!");
            indexbutton.setEnabled(true);
            indexbutton.setText("Find new songs");
            // refresh UI
            refreshUI();
            // check for IP change
            String[] ipresult = accountMngr.runIPCheck();
            // set views if values have changed
            if (ipresult[0].equals("1")) {
                // set new ip values in UI
                extiptext.setText(ipresult[1]);
                intiptext.setText(ipresult[2]);
                // set webservice error status in UI
                if (ipresult[3].equals("0")) {
                    wsstatustxt.setText(ipresult[4]);
                    wsstatusicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/stoppediconmini.png")));
                } else if (ipresult[3].equals("1")) {
                    wsstatustxt.setText("Last update successful!");
                    wsstatusicon.setIcon(new ImageIcon(airsyncserver.class.getResource("images/okiconmini.png")));
                }
            }
            // clear mem
            System.gc();
        }
    }
    /**
     *
     * @author Mohammad Faisal ermohammadfaisal.blogspot.com
     * facebook.com/m.faisal6621
     *
     */
    TrayIcon trayIcon;
    SystemTray tray;

    private void HideToSystemTray() {
        System.out.println("creating instance");
        try {
            System.out.println("setting look and feel");
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            System.out.println("Unable to set LookAndFeel");
        }
        if (SystemTray.isSupported()) {
            System.out.println("system tray supported");
            tray = SystemTray.getSystemTray();

            Image image = Toolkit.getDefaultToolkit().getImage(airsyncserver.class.getResource("images/synciconsmall.png"));
            ActionListener exitListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("Exiting....");
                    System.exit(0);
                }
            };
            PopupMenu popup = new PopupMenu();
            MenuItem defaultItem = new MenuItem("Open");
            defaultItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    setVisible(true);
                    setExtendedState(JFrame.NORMAL);
                }
            });
            popup.add(defaultItem);
            defaultItem = new MenuItem("Exit");
            defaultItem.addActionListener(exitListener);
            popup.add(defaultItem);
            trayIcon = new TrayIcon(image, "iTunes AirSync", popup);
            trayIcon.setImageAutoSize(true);
        } else {
            System.out.println("system tray not supported");
        }
        addWindowStateListener(new WindowStateListener() {

            @Override
            public void windowStateChanged(WindowEvent e) {
                if (e.getNewState() == ICONIFIED) {
                    try {
                        tray.add(trayIcon);
                        setVisible(false);
                        System.out.println("added to SystemTray");
                    } catch (AWTException ex) {
                        System.out.println("unable to add to tray");
                    }
                }
                if (e.getNewState() == 7) {
                    try {
                        tray.add(trayIcon);
                        setVisible(false);
                        System.out.println("added to SystemTray");
                    } catch (AWTException ex) {
                        System.out.println("unable to add to system tray");
                    }
                }
                if (e.getNewState() == MAXIMIZED_BOTH) {
                    //tray.remove(trayIcon);
                    setVisible(true);
                    System.out.println("Tray icon removed");
                }
                if (e.getNewState() == NORMAL) {
                    tray.remove(trayIcon);
                    setVisible(true);
                    System.out.println("Tray icon removed");
                }
            }
        });
        setIconImage(Toolkit.getDefaultToolkit().getImage("images/synciconsmall.jpg"));
        // hide when exit button pressed on window
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    setVisible(false);
                    tray.add(trayIcon);
                    System.out.println("added to SystemTray");
                } catch (AWTException ex) {
                    Logger.getLogger(airsyncserver.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        //setVisible(true);
        setDefaultCloseOperation(JFrame.ICONIFIED);
    }
}
